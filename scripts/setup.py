#!/usr/bin/env python3
"""Script de setup initial pour Desktop Agent."""

import os
import sys
import subprocess
import platform
from pathlib import Path


def run_command(cmd, cwd=None, check=True):
    """Ex√©cute une commande et affiche le r√©sultat."""
    print(f"üîß Ex√©cution: {cmd}")
    
    try:
        result = subprocess.run(
            cmd, 
            shell=True, 
            cwd=cwd, 
            check=check,
            capture_output=True,
            text=True
        )
        
        if result.stdout:
            print(result.stdout)
        
        return result
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur: {e}")
        if e.stderr:
            print(f"Stderr: {e.stderr}")
        if check:
            sys.exit(1)
        return e


def check_prerequisites():
    """V√©rifie les pr√©requis syst√®me."""
    print("üîç V√©rification des pr√©requis...")
    
    # Python
    python_version = sys.version_info
    if python_version < (3, 8):
        print("‚ùå Python 3.8+ requis")
        sys.exit(1)
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # Poetry
    try:
        result = run_command("poetry --version", check=False)
        if result.returncode == 0:
            print(f"‚úÖ {result.stdout.strip()}")
        else:
            print("‚ùå Poetry non trouv√©. Installation n√©cessaire:")
            print("   curl -sSL https://install.python-poetry.org | python3 -")
            sys.exit(1)
    except FileNotFoundError:
        print("‚ùå Poetry non trouv√© dans le PATH")
        sys.exit(1)
    
    # Node.js
    try:
        result = run_command("node --version", check=False)
        if result.returncode == 0:
            print(f"‚úÖ Node.js {result.stdout.strip()}")
        else:
            print("‚ùå Node.js non trouv√©. Installation n√©cessaire.")
            sys.exit(1)
    except FileNotFoundError:
        print("‚ùå Node.js non trouv√© dans le PATH")
        sys.exit(1)
    
    # npm
    try:
        result = run_command("npm --version", check=False)
        if result.returncode == 0:
            print(f"‚úÖ npm {result.stdout.strip()}")
        else:
            print("‚ùå npm non trouv√©")
            sys.exit(1)
    except FileNotFoundError:
        print("‚ùå npm non trouv√© dans le PATH")
        sys.exit(1)


def create_directories():
    """Cr√©e les dossiers n√©cessaires."""
    print("üìÅ Cr√©ation des dossiers...")
    
    directories = [
        "data/logs",
        "data/demos", 
        "data/models",
        "data/screenshots",
        "logs",
        "temp"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ {directory}")


def install_python_deps():
    """Installe les d√©pendances Python."""
    print("üêç Installation des d√©pendances Python...")
    
    # Installation des d√©pendances principales
    run_command("poetry install")
    
    print("‚úÖ D√©pendances Python install√©es")


def install_node_deps():
    """Installe les d√©pendances Node.js."""
    print("üì¶ Installation des d√©pendances Node.js...")
    
    overlay_dir = Path("apps/overlay")
    
    if overlay_dir.exists():
        run_command("npm install", cwd=overlay_dir)
        print("‚úÖ D√©pendances Node.js install√©es")
    else:
        print("‚ö†Ô∏è  Dossier overlay non trouv√©, skip")


def setup_config():
    """Configure les fichiers de configuration."""
    print("‚öôÔ∏è  Configuration...")
    
    config_file = Path("packages/planner/config.yaml")
    
    if not config_file.exists():
        print("‚ö†Ô∏è  Fichier de configuration non trouv√©")
    else:
        print("‚úÖ Configuration trouv√©e")


def check_optional_deps():
    """V√©rifie les d√©pendances optionnelles."""
    print("üîç V√©rification des d√©pendances optionnelles...")
    
    optional_deps = [
        ("git", "Contr√¥le de version"),
        ("docker", "Containerisation"),
        ("code", "VS Code (optionnel)")
    ]
    
    for cmd, description in optional_deps:
        result = run_command(f"{cmd} --version", check=False)
        if result.returncode == 0:
            print(f"‚úÖ {cmd}: {description}")
        else:
            print(f"‚ö†Ô∏è  {cmd}: {description} (optionnel)")


def setup_development_env():
    """Configure l'environnement de d√©veloppement."""
    print("üõ†Ô∏è  Configuration environnement de d√©veloppement...")
    
    # Pre-commit hooks (si disponible)
    result = run_command("poetry run pre-commit install", check=False)
    if result.returncode == 0:
        print("‚úÖ Pre-commit hooks configur√©s")
    else:
        print("‚ö†Ô∏è  Pre-commit non disponible (optionnel)")
    
    # Configuration IDE
    vscode_dir = Path(".vscode")
    if not vscode_dir.exists():
        vscode_dir.mkdir()
        
        # Param√®tres VS Code
        settings = {
            "python.defaultInterpreterPath": "./venv/bin/python",
            "python.formatting.provider": "black",
            "python.linting.enabled": True,
            "python.linting.flake8Enabled": True,
            "typescript.preferences.importModuleSpecifier": "relative"
        }
        
        import json
        with open(vscode_dir / "settings.json", "w") as f:
            json.dump(settings, f, indent=2)
        
        print("‚úÖ Configuration VS Code cr√©√©e")


def run_tests():
    """Lance les tests pour v√©rifier l'installation."""
    print("üß™ Tests de v√©rification...")
    
    # Tests unitaires basiques
    result = run_command("poetry run pytest tests/unit/test_common.py -v", check=False)
    
    if result.returncode == 0:
        print("‚úÖ Tests de base pass√©s")
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√© (peut √™tre normal lors de l'installation initiale)")


def print_next_steps():
    """Affiche les prochaines √©tapes."""
    print("\nüéâ Setup termin√©!")
    print("\nüìã Prochaines √©tapes:")
    print("1. Activer l'environnement: poetry shell")
    print("2. Lancer en mode dev: make dev")
    print("3. Tester les commandes MVP:")
    print("   - 'Ouvre Google Chrome'")
    print("   - 'Cr√©e un fichier texte et √©cris Bonjour'")
    print("\nüîß Commandes utiles:")
    print("- make help          : Aide")
    print("- make test          : Lancer les tests")
    print("- make lint          : V√©rifier le code")
    print("- make clean         : Nettoyer")
    print("\nüìö Documentation:")
    print("- README.md          : Guide principal")
    print("- docs/              : Documentation compl√®te")
    
    print(f"\nüñ•Ô∏è  Syst√®me d√©tect√©: {platform.system()} {platform.machine()}")
    
    if platform.system() == "Windows":
        print("üí° Sur Windows, utilisez PowerShell ou Git Bash")
        print("üí° Certaines commandes peuvent n√©cessiter des permissions administrateur")


def main():
    """Fonction principale."""
    print("üöÄ Desktop Agent - Setup Initial")
    print("=" * 50)
    
    try:
        check_prerequisites()
        create_directories()
        install_python_deps()
        install_node_deps()
        setup_config()
        check_optional_deps()
        setup_development_env()
        run_tests()
        print_next_steps()
        
    except KeyboardInterrupt:
        print("\n‚ùå Setup interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur lors du setup: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()